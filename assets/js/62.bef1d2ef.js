(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{654:function(v,_,t){"use strict";t.r(_);var e=t(6),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[v._v("#")]),v._v(" Git🌈")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[t("code",[v._v("Git")]),v._v("是一个开源的分布式版本控制系统，用于敏捷高效的处理项目，"),t("code",[v._v("Git")]),v._v("擅长的是程序代码的版本化管理，对程序代码进行差异化的版本管理，代码库占用极少的空间。")])]),t("h2",{attrs:{id:"工作位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作位置"}},[v._v("#")]),v._v(" 工作位置")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("Workspace")]),v._v(": 工作区")]),v._v(" "),t("li",[t("code",[v._v("Index/Stage")]),v._v(": 暂存区")]),v._v(" "),t("li",[t("code",[v._v("Repository")]),v._v(": 本地仓库")]),v._v(" "),t("li",[t("code",[v._v("Remote")]),v._v(": 远程仓库")])]),v._v(" "),t("h2",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[v._v("#")]),v._v(" 配置")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git config --list")]),v._v(": 显示当前的Git配置")]),v._v(" "),t("li",[t("code",[v._v("git config -e [--global]")]),v._v(": 编辑当前的Git配置文件")]),v._v(" "),t("li",[t("code",[v._v('git config [--global] user.name "[name]"')]),v._v(": 以name为例配置单个属性")])]),v._v(" "),t("h2",{attrs:{id:"创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[v._v("#")]),v._v(" 创建")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git clone [仓库地址]")]),v._v("：克隆远程仓库")]),v._v(" "),t("li",[t("code",[v._v("git init")]),v._v(": 初始化本地"),t("code",[v._v("git")]),v._v("仓库，新建仓库，通常使用"),t("code",[v._v("--bare")]),v._v("选项初始化远程仓库")])]),v._v(" "),t("h2",{attrs:{id:"增加或删除文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增加或删除文件"}},[v._v("#")]),v._v(" 增加或删除文件")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git add [file1] [file2] ...")]),v._v(": 添加指定文件到暂存区")]),v._v(" "),t("li",[t("code",[v._v("git add [dir]")]),v._v(": 添加指定目录到暂存区，包括子目录")]),v._v(" "),t("li",[t("code",[v._v("git add .")]),v._v(": 添加当前目录的所有文件到暂存区")]),v._v(" "),t("li",[t("code",[v._v("git add -p")]),v._v(": 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交")]),v._v(" "),t("li",[t("code",[v._v("git rm [file1] [file2] ...")]),v._v(": 删除工作区文件，并且将这次删除放入暂存区")]),v._v(" "),t("li",[t("code",[v._v("git rm --cached [file]")]),v._v(": 从暂存区删除文件，工作区则不做出改变")]),v._v(" "),t("li",[t("code",[v._v("git mv [file-original] [file-renamed]")]),v._v(": 改名文件，并且将这个改名放入暂存区")])]),v._v(" "),t("h2",{attrs:{id:"代码提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[v._v("#")]),v._v(" 代码提交")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git commit -m [message]")]),v._v(": 提交暂存区到本地仓库区")]),v._v(" "),t("li",[t("code",[v._v("git commit [file1] [file2] -m [message]")]),v._v(": 提交暂存区的指定文件到本地仓库")]),v._v(" "),t("li",[t("code",[v._v("git commit -a")]),v._v(": 提交工作区自上次"),t("code",[v._v("commit")]),v._v("之后的变化，直接到仓库区")]),v._v(" "),t("li",[t("code",[v._v("git commit -f")]),v._v(": 提交时显示所有"),t("code",[v._v("diff")]),v._v("信息")]),v._v(" "),t("li",[t("code",[v._v("git commit --amend -m [message]")]),v._v(": 用一次新的"),t("code",[v._v("commit")]),v._v("，替代上一次提交，如果代码没有任何新变化，则用来改写上一次"),t("code",[v._v("commit")]),v._v("的提交信息")]),v._v(" "),t("li",[t("code",[v._v("git commit --amend [file1] [file2] ...")]),v._v(": 重做上一次"),t("code",[v._v("commit")]),v._v("，并包括指定文件的新变化")])]),v._v(" "),t("h2",{attrs:{id:"分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[v._v("#")]),v._v(" 分支")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git branch")]),v._v(": 列出所有本地分支")]),v._v(" "),t("li",[t("code",[v._v("git branch -f")]),v._v(": 列出所有远程分支")]),v._v(" "),t("li",[t("code",[v._v("git branch -a")]),v._v(": 列出所有本地分支和远程分支")]),v._v(" "),t("li",[t("code",[v._v("git branch [branch-name]")]),v._v(": 新建一个分支")]),v._v(" "),t("li",[t("code",[v._v("git checkout -b [branch-name]")]),v._v(": 新建一个分支，并切换到该分支")]),v._v(" "),t("li",[t("code",[v._v("git branch [branch-name] [commit]")]),v._v(": 新建一个分支，指向指定"),t("code",[v._v("commit")])]),v._v(" "),t("li",[t("code",[v._v("git branch --track [branch-name] [remote-branch]")]),v._v(": 新建一个分支，与指定的远程分支建立追踪关系")]),v._v(" "),t("li",[t("code",[v._v("git checkout [branch-name]")]),v._v(": 切换到指定分支，并更新工作区")]),v._v(" "),t("li",[t("code",[v._v("git checkout -")]),v._v(": 切换到上一个分支")]),v._v(" "),t("li",[t("code",[v._v("git branch --set-upstream [branch] [remote-branch]")]),v._v(": 建立追踪关系，在现有分支与指定的远程分支之间")]),v._v(" "),t("li",[t("code",[v._v("git merge [branch]")]),v._v(": 合并制定分支到当前分支")]),v._v(" "),t("li",[t("code",[v._v("git cherry-pick [commit]")]),v._v(": 选择一个"),t("code",[v._v("commit")]),v._v("，合并进当前分支")]),v._v(" "),t("li",[t("code",[v._v("git branch -d [branch-name]")]),v._v(": 删除指定分支")]),v._v(" "),t("li",[t("code",[v._v("git push origin --delete [branch-name]")]),v._v(": 删除指定远程分支")])]),v._v(" "),t("h2",{attrs:{id:"标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[v._v("#")]),v._v(" 标签")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git tag")]),v._v(": 列出所有标签")]),v._v(" "),t("li",[t("code",[v._v("git tag [tag]")]),v._v(": 新建一个"),t("code",[v._v("tag")]),v._v("在当前"),t("code",[v._v("commit")])]),v._v(" "),t("li",[t("code",[v._v("git tag [tag] [commit]")]),v._v(": 新建一个"),t("code",[v._v("tag")]),v._v("在指定"),t("code",[v._v("commit")])]),v._v(" "),t("li",[t("code",[v._v("git tag -d [tag]")]),v._v(": 删除本地"),t("code",[v._v("tag")])]),v._v(" "),t("li",[t("code",[v._v("git push origin :refs/tags/[tagName]")]),v._v(": 删除远程"),t("code",[v._v("tag")])]),v._v(" "),t("li",[t("code",[v._v("git show [tag]")]),v._v(": 查看"),t("code",[v._v("tag")]),v._v("信息")]),v._v(" "),t("li",[t("code",[v._v("git push [remote] [tag]")]),v._v(": 提交指定"),t("code",[v._v("tag")])]),v._v(" "),t("li",[t("code",[v._v("git push [remote] --tags")]),v._v(": 提交所有"),t("code",[v._v("tag")])]),v._v(" "),t("li",[t("code",[v._v("git checkout -b [branch] [tag]")]),v._v(": 新建一个分支，指向某个"),t("code",[v._v("tag")])])]),v._v(" "),t("h2",{attrs:{id:"查看信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[v._v("#")]),v._v(" 查看信息")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git status")]),v._v(": 显示所有发生变更的文件")]),v._v(" "),t("li",[t("code",[v._v("git log")]),v._v(": 显示当前分支的版本历史")]),v._v(" "),t("li",[t("code",[v._v("git log --stat")]),v._v(": 显示"),t("code",[v._v("commit")]),v._v("历史，以及每次"),t("code",[v._v("commit")]),v._v("发生变更的文件")]),v._v(" "),t("li",[t("code",[v._v("git log -S [keyword]")]),v._v(": 根据关键词搜索提交历史")]),v._v(" "),t("li",[t("code",[v._v("git log [tag] HEAD --pretty=format:%s")]),v._v(": 显示某个"),t("code",[v._v("commit")]),v._v("之后的所有变动，每个"),t("code",[v._v("commit")]),v._v("占据一行")]),v._v(" "),t("li",[t("code",[v._v("git log [tag] HEAD --grep feature")]),v._v(": 显示某个"),t("code",[v._v("commit")]),v._v("之后的所有变动，其提交说明必须符合搜索条件")]),v._v(" "),t("li",[t("code",[v._v("git log --follow [file]")]),v._v(": 显示某个文件的版本历史，包括文件改名")]),v._v(" "),t("li",[t("code",[v._v("git log -p [file]")]),v._v(": 显示指定文件相关的每一次"),t("code",[v._v("diff")])]),v._v(" "),t("li",[t("code",[v._v("git log -5 --pretty --oneline")]),v._v(": 显示过去5次提交")]),v._v(" "),t("li",[t("code",[v._v("git shortlog -sn")]),v._v(": 显示所有提交过的用户，按提交次数排序")]),v._v(" "),t("li",[t("code",[v._v("git blame [file]")]),v._v(": 显示指定文件是什么人在什么时间修改过")]),v._v(" "),t("li",[t("code",[v._v("git diff")]),v._v(": 显示暂存区和工作区的差异")]),v._v(" "),t("li",[t("code",[v._v("git diff --cached [file]")]),v._v(": 显示暂存区和上一个"),t("code",[v._v("commit")]),v._v("的差异")]),v._v(" "),t("li",[t("code",[v._v("git diff [HEAD]")]),v._v(": 显示工作区与当前分支最新"),t("code",[v._v("commit")]),v._v("之间的差异")]),v._v(" "),t("li",[t("code",[v._v("git diff [first-branch]...[second-branch]")]),v._v(": 显示两次提交之间的差异")]),v._v(" "),t("li",[t("code",[v._v('git diff --shortstat "@{0 day ago}"')]),v._v(": 显示今天你写了多少行代码")]),v._v(" "),t("li",[t("code",[v._v("git show [commit]")]),v._v(": 显示某次提交的原数据和内容变化")]),v._v(" "),t("li",[t("code",[v._v("git show --name-only [commit]")]),v._v(": 显示某次提交发生变化的文件")]),v._v(" "),t("li",[t("code",[v._v("git show [commit]:[filename]")]),v._v(": 显示某次提交时，某个文件的内容")]),v._v(" "),t("li",[t("code",[v._v("git reflog")]),v._v(": 显示当前分支的最近几次提交")])]),v._v(" "),t("h2",{attrs:{id:"撤销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[v._v("#")]),v._v(" 撤销")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git checkout [file]")]),v._v(": 恢复暂存区的指定文件到工作区")]),v._v(" "),t("li",[t("code",[v._v("git checkout [commit] [file]")]),v._v(": 恢复某个"),t("code",[v._v("commit")]),v._v("的指定文件到暂存区和工作区")]),v._v(" "),t("li",[t("code",[v._v("git checkout .")]),v._v(": 恢复暂存区的所有文件到工作区")]),v._v(" "),t("li",[t("code",[v._v("git reset [file]")]),v._v(": 重置暂存区的指定文件，与上一次"),t("code",[v._v("commit")]),v._v("保持一致，但工作区不变")]),v._v(" "),t("li",[t("code",[v._v("git reset --hard")]),v._v(": 重置暂存区与工作区，与上一次"),t("code",[v._v("commit")]),v._v("保持一致")]),v._v(" "),t("li",[t("code",[v._v("git revert [commit]")]),v._v(": 新建一个"),t("code",[v._v("commit")]),v._v("，用来撤销指定"),t("code",[v._v("commit")]),v._v("，后者的所有变化都将被前者抵消，并且应用到当前分支")]),v._v(" "),t("li",[t("code",[v._v("git reset --soft HEAD^")]),v._v(": 撤回"),t("code",[v._v("commit")]),v._v("操作，保留之前"),t("code",[v._v("commit")]),v._v("的代码")])]),v._v(" "),t("h2",{attrs:{id:"远程同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[v._v("#")]),v._v(" 远程同步")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("git fetch [remote]")]),v._v(": 下载远程仓库的所有变动")]),v._v(" "),t("li",[t("code",[v._v("git remote -v")]),v._v(": 显示所有的远程仓库")]),v._v(" "),t("li",[t("code",[v._v("git remote show [remote]")]),v._v(": 显示某个远程仓库的信息")]),v._v(" "),t("li",[t("code",[v._v("git remote add [remote-name] [url]")]),v._v(": 增加一个新的远程仓库，并命名")]),v._v(" "),t("li",[t("code",[v._v("git pull [remote] [branch]")]),v._v(": 取回远程仓库的变化，并与本地分支合并")]),v._v(" "),t("li",[t("code",[v._v("git push [remote] [branch]")]),v._v(": 上传本地指定分支到远程仓库")]),v._v(" "),t("li",[t("code",[v._v("git push [remote] --force")]),v._v(": 强行推送当前分支到远程仓库，即使有冲突")]),v._v(" "),t("li",[t("code",[v._v("git push [remote] --all")]),v._v(": 推送所有分支到远程仓库")])]),v._v(" "),t("h2",{attrs:{id:"撤销第一次commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#撤销第一次commit"}},[v._v("#")]),v._v(" 撤销第一次commit")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[v._v("​\t"),t("code",[v._v("git init")]),v._v("初始化仓库之后，提交了第一个"),t("code",[v._v("commit")]),v._v(",之后发现有点问题，想要撤销这次"),t("code",[v._v("commit")]),v._v(",由于是第一次提交,使用"),t("code",[v._v("git reset")]),v._v("是行不通的，但又不想使用"),t("code",[v._v("git revert")]),v._v("额外增加一次"),t("code",[v._v("commit")]),v._v(".就可以使用下面这条命令，将"),t("code",[v._v("HEAD")]),v._v("指针重置")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("git update-ref -d HEAD\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])])])}),[],!1,null,null,null);_.default=i.exports}}]);