(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{610:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"javascript异步机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript异步机制"}},[t._v("#")]),t._v(" JavaScript异步机制")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t\tJavaScript是"),a("strong",[t._v("单线程语言")]),t._v("，也就是说，一次只能完成一件任务，如果存在多个任务需要完成，那么后面的任务要等待前一个任务完成之后，才能执行，以此类推。这种模式的好处是执行环境相对单纯，实现起来简单，坏处是只要有一个任务耗时过长卡住，后面的任务都会一直等待，拖延整个程序的执行。常见的浏览器假死状态，通常就是某一段JS代码长时间运行比如死循环，导致其他任务无法执行")])]),a("h2",{attrs:{id:"执行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行机制"}},[t._v("#")]),t._v(" 执行机制")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t"),a("code",[t._v("JS")]),t._v("为了解决单线程带来的上述问题，把任务的执行方式分为两种: "),a("code",[t._v("同步(Synchronous)")]),t._v(" 和 "),a("code",[t._v("异步(Asynchronous)")])])]),a("h3",{attrs:{id:"同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步"}},[t._v("#")]),t._v(" 同步")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t\t同步模式就是同步阻塞，后面的任务需要等待前一个任务执行完毕，才能开始执行。也就是说，程序的执行顺序，和任务的排列顺序是一致的，比较好理解")])]),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("whlie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'while 循环执行完毕后才能执行'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t\t异步就是非阻塞执行，每个任务拥有一个或多个"),a("code",[t._v("callback")]),t._v("回调函数。前一个任务结束后，执行该任务的回调函数，而后一个任务则不等待前一个任务执行完毕就直接执行。所以程序的实际执行顺序与任务排列顺序是不一致的。")]),t._v(" "),a("p",[t._v("​\t\t我们知道，浏览器给每个"),a("code",[t._v("Tab")]),t._v("标签页分配了一个单独的"),a("code",[t._v("JS")]),t._v("线程,用来与用户交互或操作DOM等等，这也就是为什么它只能是单线程(如果"),a("code",[t._v("JS")]),t._v("不是单线程的，那么一个线程添加DOM，一个线程删除DOM，浏览器就无法确定以哪个线程的操作为准)")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t\t"),a("code",[t._v("W3C")]),t._v("在HTML标准中规定，规定要求"),a("code",[t._v("setTimeout")]),t._v("中低于"),a("code",[t._v("4ms")]),t._v("的时间间隔算为"),a("code",[t._v("4ms")]),t._v("。此外这与浏览器设定、主线程以及任务队列也有关系，执行时间可能大于"),a("code",[t._v("4ms")]),t._v("，例如老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动尤其是涉及页面重新渲染的部分，通常不会立即执行，而是每16毫秒执行一次。这时使用"),a("code",[t._v("requestAnimationFrame()")]),t._v("的效果要好于"),a("code",[t._v("setTimeout()。")])])]),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" consolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"回调函数中的 后执行"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'先执行'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"异步机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步机制"}},[t._v("#")]),t._v(" 异步机制")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我得等while 执行完毕后执行'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t\t上面的代码中，在主线程设置了一个非常大的循环来阻塞"),a("code",[t._v("JS")]),t._v("主线程(如果设置一个死循环，那么上面的"),a("code",[t._v("setTimeout")]),t._v("将永远不会有机会执行)。在浏览器中测试，大约30s后才执行"),a("code",[t._v("setTimeout")]),t._v("(因为主执行栈的任务并没有执行完毕，就不会去任务队列读取任务执行，即使这个任务早就在任务队列中)")]),t._v(" "),a("p",[t._v("​\t\t而且，浏览器渲染线程与"),a("code",[t._v("JS")]),t._v("引擎线程是"),a("strong",[t._v("互斥的")]),t._v("，即在"),a("code",[t._v("Js")]),t._v("线程在处理任务时，渲染线程会被挂起，也就是浏览器暂停渲染，整个页面都被阻塞，无法刷新甚至无法关闭，只能通过使用任务管理器结束"),a("code",[t._v("Tab")]),t._v("进程的方式关闭页面。")]),t._v(" "),a("p",[t._v("​\t\t"),a("code",[t._v("JS")]),t._v("实现异步是通过"),a("strong",[t._v("执行栈和任务队列")]),t._v("来配合完成的，所有同步任务都在主线程执行，形成执行栈，任务队列中存放这各种事件回调，当执行栈任务执行完毕(执行栈为空)时，主线程就开始读取任务队列中的任务并执行，不断往复循环。")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t\t另外，关于"),a("code",[t._v("setTimeout")]),t._v("，定时计数器并不是由"),a("code",[t._v("JavaScript")]),t._v("来进行计数的，因为一旦JS线程发生阻塞就会影响计时器的准确，计数是由浏览器线程进行的，当计数完毕，就将它的回调加入任务队列。同样"),a("code",[t._v("HTTP")]),t._v("请求在浏览器中也存在单独的线程，也是执行完毕后将事件回调置入任务队列")])]),a("h2",{attrs:{id:"event-loop-事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-事件循环"}},[t._v("#")]),t._v(" Event Loop（事件循环）🔁")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("​\t\t主线程从任务队列中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为"),a("code",[t._v("Event Loop")]),t._v("，"),a("code",[t._v("Event Loop")]),t._v("是一个执行模型，在不同的地方有不同的实现。比如浏览器和"),a("code",[t._v("NodeJS")]),t._v("基于不同的技术实现了各自的"),a("code",[t._v("Event Loop")]),t._v("。浏览器的"),a("code",[t._v("Event Loop")]),t._v("是在"),a("code",[t._v("HTML5")]),t._v("的规范中明确定义，"),a("code",[t._v("NodeJS")]),t._v("的"),a("code",[t._v("Event Loop")]),t._v("是基于"),a("code",[t._v("libuv")]),t._v("实现的")]),t._v(" "),a("p",[t._v("​\t\t在浏览器中的"),a("code",[t._v("Event Loop")]),t._v("由执行栈"),a("code",[t._v("Execution Stack")]),t._v("、后台线程"),a("code",[t._v("Background Threads")]),t._v("、宏队列"),a("code",[t._v("Macrotask Queue")]),t._v("、微队列"),a("code",[t._v("Microtask Queue")]),t._v("组成。")]),t._v(" "),a("ul",[a("li",[t._v("执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。")]),t._v(" "),a("li",[t._v("后台线程就是浏览器实现对于"),a("code",[t._v("setTimeout")]),t._v("、"),a("code",[t._v("setInterval")]),t._v("、"),a("code",[t._v("XMLHttpRequest")]),t._v("等等的执行线程。")]),t._v(" "),a("li",[t._v("宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括"),a("code",[t._v("setTimeout")]),t._v("、"),a("code",[t._v("setInterval")]),t._v("、"),a("code",[t._v("setImmediate(Node)")]),t._v("、"),a("code",[t._v("requestAnimationFrame")]),t._v("、"),a("code",[t._v("UI rendering")]),t._v("、"),a("code",[t._v("I/O")]),t._v("等操作")]),t._v(" "),a("li",[t._v("微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括"),a("code",[t._v("Promise")]),t._v("、"),a("code",[t._v("process.nextTick(Node)")]),t._v("、"),a("code",[t._v("Object.observe")]),t._v("、"),a("code",[t._v("MutationObserver")]),t._v("等操作")])]),t._v(" "),a("p",[t._v("​\t\t为了节省篇幅，有关事件循环更详细的介绍请移步:  "),a("a",{attrs:{href:"https://oceanh.top/blog/html-css-js/dui-javascriptshi-jian-xun-huan-ji-zhi-de-li-jie.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS中的事件循环机制"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);